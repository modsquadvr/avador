
REAL-TIME TEXT-TO-AUDIO PROCESSING API DOCUMENTATION
=================================================

1. WebSocket Connection
----------------------
URL: wss://api.openai.com/v1/realtime
Model: gpt-4o-realtime-preview-2024-10-01
Headers Required:
- Authorization: Bearer <OPENAI_API_KEY>
- OpenAI-Beta: realtime=v1

2. Session Configuration
-----------------------
File: sessionConfig.js
Configuration includes:
- Event ID tracking
- Session type specification
- Modality settings (text, audio)
- System instructions (loaded from SYSTEM_PROMPT.txt)
- Voice settings (default: "ash")
- Audio format specifications (pcm16)
- Turn detection parameters:
  * Server VAD type
  * Threshold: 0.5
  * Prefix padding: 300ms
  * Silence duration: 500ms
- Tool choice: "auto"
- Temperature: 0.8
- Max response tokens: "inf"

3. Data Flow
-----------
Client → Server:
1. Initial session update:
   {
     "type": "session.update",
     "event_id": "<event_id>",
     "session": <session_config_object>
   }

2. Text input:
   {
     "type": "conversation.item.create",
     "item": {
       "type": "message",
       "role": "user",
       "content": [{
         "type": "input_text",
         "text": "<text_content>"
       }]
     }
   }

3. Response request:
   {
     "type": "response.create"
   }

Server → Client:
1. Audio chunks:
   {
     "type": "response.audio.delta",
     "delta": "<base64_encoded_audio_chunk>"
   }

2. Completion signal:
   {
     "type": "response.audio.done"
   }

4. Audio Output Details
----------------------
Output Format:
- WAV file format
- 16-bit PCM encoding
- Sample rate: 24000 Hz
- Mono channel

Processing Steps:
1. Text input processing
2. Server-side speech synthesis
3. Audio chunk reception
4. Base64 decoding
5. WAV file construction
6. Final audio file generation

5. File Structure
----------------
main.js
  - WebSocket client and main processing logic
sessionConfig.js
  - Session configuration and parameters
conversationEvents.js
  - Event handling and message formatting
audioProcessor.js
  - Audio processing and file management
audioUtils.js
  - WAV encoding and file operations
SYSTEM_PROMPT.txt
  - System instructions for the AI
output_audio/
  - Generated audio output
  - JSON metadata files
  - Processing logs